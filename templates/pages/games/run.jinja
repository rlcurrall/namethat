{% extends "layouts/app.jinja" %}

{% block title %}Run Game{% endblock %}

{% block content %}
<div x-data="GamePlay" class="h-full flex-1 flex flex-col">
    <!-- Background -->
    <svg class="absolute inset-0 -z-10 h-full w-full stroke-white/10 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
        aria-hidden="true">
        <defs>
            <pattern id="983e3e4c-de6d-4c3f-8d64-b9761d1534cc" width="200" height="200" x="50%" y="-1"
                patternUnits="userSpaceOnUse">
                <path d="M.5 200V.5H200" fill="none" />
            </pattern>
        </defs>
        <svg x="50%" y="-1" class="overflow-visible fill-gray-800/20">
            <path d="M-200 0h201v201h-201Z M600 0h201v201h-201Z M-400 600h201v201h-201Z M200 800h201v201h-201Z"
                stroke-width="0" />
        </svg>
        <rect width="100%" height="100%" stroke-width="0" fill="url(#983e3e4c-de6d-4c3f-8d64-b9761d1534cc)" />
    </svg>
    <div class="absolute left-[calc(50%-4rem)] top-10 -z-10 transform-gpu blur-3xl sm:left-[calc(50%-18rem)] lg:left-48 lg:top-[calc(50%-30rem)] xl:left-[calc(50%-24rem)]"
        aria-hidden="true">
        <div class="aspect-[1108/632] w-[69.25rem] bg-gradient-to-r from-[#80caff] to-[#4f46e5] opacity-20" style="
              clip-path: polygon(
                73.6% 51.7%,
                91.7% 11.8%,
                100% 46.4%,
                97.4% 82.2%,
                92.5% 84.9%,
                75.7% 64%,
                55.3% 47.5%,
                46.5% 49.4%,
                45% 62.9%,
                50.3% 87.2%,
                21.3% 64.1%,
                0.1% 100%,
                5.4% 51.1%,
                21.4% 63.9%,
                58.9% 0.2%,
                73.6% 51.7%
              );
            "></div>
    </div>

    <!-- Spinner -->
    <template x-if="clientState === 'initializing'">
        <div class="py-24 flex items-center justify-center">
            <div class="lds-dual-ring"></div>
        </div>
    </template>
    <style>
        .lds-dual-ring {
            display: inline-block;
            width: 80px;
            height: 80px;
        }

        .lds-dual-ring:after {
            content: " ";
            display: block;
            width: 64px;
            height: 64px;
            margin: 8px;
            border-radius: 50%;
            border: 6px solid rgb(20 184 166);
            border-color: rgb(20 184 166) transparent rgb(20 184 166) transparent;
            animation: lds-dual-ring 1.2s linear infinite;
        }

        @keyframes lds-dual-ring {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>

    <template x-if="clientState === 'waitingRoom'">
        <div
            class="w-full flex-1 flex flex-col justify-around items-center max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row">
            <div>
                <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                <h2 class="text-2xl font-extrabold text-white tracking-tight">
                    Waiting Room
                </h2>
                <p class="mt-4 text-xl text-gray-300">
                    Waiting for the game master to start the game...
                </p>

                <div class="my-8">
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-500 hover:bg-gray-600"
                        @click="copyLink">
                        Copy Invite Link
                    </button>
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-teal-500 hover:bg-teal-600"
                        @click="startRound" :disabled="client.awaitingUpdate">
                        <span x-show="client.awaitingUpdate">
                            <half-circle-spinner color="white" size="20"></half-circle-spinner>
                        </span>
                        Start Game
                    </button>
                </div>
            </div>
            <div>
                <!-- List active players -->
                <div class="flex flex-col space-y-4">
                    <template x-for="player in game.players.filter(p => p.active)" :key="player.id">
                        <div
                            class="w-[18rem] flex items-center border-2 rounded-full overflow-hidden bg-gradient-to-r from-indigo-500 from-10% via-blue-500 via-30% to-teal-500">
                            <div class="h-124 w-24">
                                <img class="h-124 w-24 rounded-full overflow-hidden"
                                    :src="`https://robohash.org/${player.id}`" :alt="player.username" />
                            </div>
                            <p class="text-lg sm:text-2xl font-medium text-white text-center text-ellipsis overflow-hidden flex-1 pr-8"
                                x-text="player.username"></p>
                        </div>
                    </template>
                </div>
            </div>
        </div>
    </template>

    <template x-if="clientState === 'gameStarted'">
        <div
            class="w-full flex-1 flex flex-col justify-around items-center max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row">
            <div>
                <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                <h2 class="text-2xl font-extrabold text-white tracking-tight">
                    Game Started!
                </h2>
                <p class="mt-4 text-xl text-gray-300">
                    Waiting for the round to start...
                </p>

                <div class="my-8">
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-500 hover:bg-gray-600"
                        @click="copyLink">
                        Copy Invite Link
                    </button>
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-teal-500 hover:bg-teal-600"
                        @click="startRound" :disabled="client.awaitingUpdate">
                        <span x-show="client.awaitingUpdate">
                            <half-circle-spinner color="white" size="20"></half-circle-spinner>
                        </span>
                        Start Game
                    </button>
                </div>
            </div>
        </div>
    </template>

    <template x-if="clientState === 'answering'">
        <div
            class="w-full flex-1 flex flex-col justify-around items-center max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row">
            <div class="text-center md:text-left space-y-4">
                <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                <h2 class="text-2xl font-extrabold text-white tracking-tight">
                    Round <span x-text="game.roundNumber"></span>
                </h2>

                <div class="my-8 space-y-4">
                    <p class="text-white"><span x-text="game.answers.length"></span> answers given.</p>
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-teal-500 to-teal-500 hover:from-teal-600 hover:to-teal-600"
                        @click="closeAnswers" :disabled="client.awaitingUpdate">
                        <span x-show="client.awaitingUpdate">
                            <half-circle-spinner color="white" size="20"></half-circle-spinner>
                        </span>
                        Close Answers
                    </button>
                </div>
            </div>
            <div>
                <img x-show="game.imageUrl" class="h-auto w-[80vw] sm:w-[36rem] rounded-xl" :src="game.imageUrl"
                    :alt="game.name" />
            </div>

            <form class="fixed bottom-0 w-full flex flex-col p-4 bg-gray-900 border-t border-white/5"
                x-show="client.playerType === 'player' && game.answers.filter(a => a.playerId === client.playerId).length === 0"
                @submit.prevent="submitAnswer($refs.answer.value)">
                <label for="answer" class="sr-only"> Your Answer </label>
                <div class="flex">
                    <input x-ref="answer" type="text" name="answer" id="answer" :disabled="client.awaitingUpdate"
                        class="px-6 py-2 shadow-sm focus:ring-teal-500 focus:border-teal-500 block w-full sm:text-sm border-gray-300 rounded-l-md bg-gray-800 text-white"
                        placeholder="Your Answer" />
                    <button type="submit" :disabled="client.awaitingUpdate"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-r-md shadow-sm text-white bg-gradient-to-r from-teal-500 to-teal-500 hover:from-teal-600 hover:to-teal-600">
                        <span x-show="client.awaitingUpdate">
                            <half-circle-spinner color="white" size="20"></half-circle-spinner>
                        </span>
                        Submit
                    </button>
                </div>
            </form>
        </div>
    </template>

    <template x-if="['revealing', 'voting'].includes(clientState)">
        <div
            class="w-full flex-1 flex flex-col justify-around items-center gap-8 max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row flex-reverse">
            <div class="text-center md:text-left space-y-4">
                <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                <h2 class="text-2xl font-extrabold text-white tracking-tight">
                    Round <span x-text="game.roundNumber"></span>
                </h2>
                <!-- Guidance for what the game master can do (close answers when all are submitted or select the winning answer) -->
                <p class="my-8 text-white"
                    x-text="clientState === 'revealing' ? 'Click on answers to reveal them to everyone.' : 'Click on an answer to select it as the winning answer.'">
                </p>

                <!-- grid of answers -->
                <div class="text-xl text-gray-300">
                    <p class="py-8">Answers:</p>
                    <div class="grid grid-cols-1 gap-8">
                        <template x-for="answer in game.answers">
                            <div>
                                <button @click="selectWinner(answer.playerId)" :disabled="clientState !== 'voting'"
                                    x-show="answer.shown"
                                    class="relative w-full flex items-center justify-center border-2 rounded-full bg-gradient-to-r from-indigo-500 from-10% via-blue-500 via-30% to-teal-500">
                                    <p class="text-lg sm:text-2xl font-medium text-white text-center text-ellipsis overflow-hidden flex-1 px-8 py-4"
                                        x-text="answer.value"></p>
                                    <div x-show="answer.likes > 0"
                                        class="absolute right-0 -bottom-5 border-[3px] border-white/70 rounded-full flex items-center justify-center">
                                        <div
                                            class="flex items-center justify-center w-8 h-8 rounded-full bg-slate-500 z-10">
                                            <p class="text-sm font-medium text-white" x-text="answer.likes"></p>
                                        </div>
                                    </div>
                                </button>
                                <button @click="revealAnswer(answer.id)" :disabled="clientState !== 'revealing'"
                                    x-show="!answer.shown"
                                    class="w-full flex items-center border-2 rounded-full overflow-hidden bg-gradient-to-r from-stone-500 from-20% via-gray-500 via-40% to-slate-600">
                                    <div class="w-14 h-14"></div>
                                    <p
                                        class="text-lg sm:text-2xl font-medium text-white text-center text-ellipsis overflow-hidden flex-1 pl-2 pr-8">
                                    </p>
                                </button>
                            </div>
                        </template>
                    </div>
                </div>
            </div>
            <div>
                <img x-show="game.imageUrl" class="h-auto w-[80vw] sm:w-[36rem] rounded-xl" :src="game.imageUrl"
                    :alt="game.name" />
            </div>
        </div>
    </template>

    <template x-if="clientState === 'roundFinished'">
        <div
            class="w-full flex-1 flex flex-col justify-around items-center gap-8 max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row flex-reverse">
            <div class="text-center md:text-left space-y-4">
                <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                <h2 class="text-2xl font-extrabold text-white tracking-tight">
                    Round <span x-text="game.roundNumber"></span>
                </h2>

                <div class="my-8">
                    <button type="button"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-teal-500 to-teal-500 hover:from-teal-600 hover:to-teal-600"
                        @click="nextRoundOrEndGame" :disabled="client.awaitingUpdate">
                        <span x-show="client.awaitingUpdate">
                            <half-circle-spinner color="white" size="20"></half-circle-spinner>
                        </span>
                        <span x-text="game.lastRound ? 'End Game' : 'End Round'"></span>
                    </button>
                </div>

                <div class="text-xl text-gray-300">
                    <!-- Winner -->
                    <p class="py-8">
                        <span x-text="game.players.find(p => p.id === game.roundWinner.id).username"></span>
                        won the round!
                    </p>
                    <!-- Winning answer -->
                    <div
                        class="relative w-full flex items-center border-2 rounded-full bg-gradient-to-r from-indigo-500 from-10% via-blue-500 via-30% to-teal-500">
                        <div class="w-14 h-14">
                            <img class="w-14 rounded-full overflow-hidden"
                                :src="`https://robohash.org/${game.roundWinner.id}`" />
                        </div>
                        <p class="text-lg sm:text-2xl font-medium text-white text-center text-ellipsis overflow-hidden flex-1 pl-2 pr-8"
                            x-text="game.answers.find(a => a.playerId === game.roundWinner.id)?.value"></p>
                    </div>
                </div>
            </div>
            <div>
                <img x-show="game.imageUrl" class="h-auto w-[80vw] sm:w-[36rem] rounded-xl" :src="game.imageUrl"
                    :alt="game.name" />
            </div>
        </div>
    </template>

    <template x-if="clientState === 'gameFinished'">
        <div class="flex flex-col flex-1 w-full justify-center">
            <div
                class="w-full flex flex-col justify-around items-center gap-8 max-w-7xl mx-auto px-6 py-12 lg:px-8 md:flex-row flex-reverse">
                <div class="text-center md:text-left space-y-4">
                    <h1 class="text-4xl font-extrabold text-white tracking-tight" x-text="game.name"></h1>
                    <h2 class="text-2xl font-extrabold text-white tracking-tight">
                        Game Over!
                    </h2>
                    <div class="text-xl text-gray-300">
                        <!-- Winner -->
                        <p class="py-8">
                            <span x-text="game.players.find(p => p.id === game.gameWinner.id).username"></span>
                            won the game!
                        </p>
                    </div>
                </div>
                <div>
                    <!-- List of scores for all players -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <template
                            x-for="player in Object.entries(game.scores).sort((a, b) => b[1] - a[1]).map(([username, score], index) => ({ index, username, score, id: game.players.find(p => p.username === username).id }))"
                            :key="player.username">
                            <div
                                class="relative w-[18rem] flex items-center border-2 rounded-full bg-gradient-to-r from-indigo-500 from-10% via-blue-500 via-30% to-teal-500">
                                <div class="h-124 w-24">
                                    <img class="h-124 w-24 rounded-full overflow-hidden"
                                        :src="`https://robohash.org/${player.id}`" :alt="player.username" />
                                </div>
                                <p class="text-lg sm:text-2xl font-medium text-white text-center text-ellipsis overflow-hidden flex-1 pl-2 pr-8"
                                    x-text="player.username"></p>
                                <div
                                    class="absolute right-0 -bottom-4 border-[3px] border-white/70 rounded-full flex items-center justify-center">
                                    <div :class="'flex items-center justify-center w-8 h-8 rounded-full z-10 text-sm font-medium text-white' + (player.index === 0 ? ' bg-green-500' : ' bg-slate-600')"
                                        x-text="player.score"></div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>

            <div class="flex flex-col items-center text-center p-4">
                <a href="/games"
                    class="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-teal-500 to-teal-500 hover:from-teal-600 hover:to-teal-600">
                    <span x-show="client.awaitingUpdate">
                        <half-circle-spinner color="white" size="20"></half-circle-spinner>
                    </span>
                    Go Home
                </a>
            </div>
        </div>
    </template>

    <!-- Debug modal -->
    <template x-teleport="#modal">
        <div x-show="debug" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-gray-900 text-white rounded-lg p-4 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center">
                    <h1 class="text-lg font-bold">Debug</h1>
                    <button class="text-gray-400 hover:text-gray-500" @click="debug = false">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                            stroke-width="2" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="mt-4 text-sm">
                    <h2 class="font-bold">Client State</h2>
                    <table class="mt-2 table-auto w-full border">
                        <tr class="border bg-slate-800">
                            <td class="p-2">Client State</td>
                            <td class="p-2" x-text="clientState"></td>
                        </tr>
                        <template x-for="[key, value] of Object.entries(client)">
                            <tr class="border bg-slate-800">
                                <td class="p-2"
                                    x-text="key.replace(/([a-z])([A-Z])/g, '$1 $2').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')">
                                </td>
                                <td class="p-2" x-text="value"></td>
                            </tr>
                        </template>
                    </table>
                </div>
                <div class="mt-4">
                    <h2 class="text-sm font-bold">Game State</h2>
                    <table class="mt-2 table-auto w-full border">
                        <template
                            x-for="[key, value] of Object.entries(game).filter(([_, v]) => typeof v !== 'object')">
                            <tr class="border bg-slate-800">
                                <td class="p-2"
                                    x-text="key.replace(/([a-z])([A-Z])/g, '$1 $2').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')">
                                </td>
                                <td class="p-2 break-all" x-text="value"></td>
                            </tr>
                        </template>
                    </table>
                </div>
                <template x-if="game.gameWinner">
                    <div class="mt-4">
                        <h2 class="text-sm font-bold">Game Winner</h2>
                        <table class="mt-2 table-auto w-full border">
                            <template x-for="[key, value] of Object.entries(game.gameWinner)">
                                <tr class="border bg-slate-800">
                                    <td class="p-2"
                                        x-text="key.replace(/([a-z])([A-Z])/g, '$1 $2').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')">
                                    </td>
                                    <td class="p-2 break-all" x-text="value"></td>
                                </tr>
                            </template>
                        </table>
                    </div>
                </template>
                <template x-if="game.roundWinner">
                    <div class="mt-4">
                        <h2 class="text-sm font-bold">Round Winner</h2>
                        <table class="mt-2 table-auto w-full border">
                            <template x-for="[key, value] of Object.entries(game.roundWinner)">
                                <tr class="border bg-slate-800">
                                    <td class="p-2"
                                        x-text="key.replace(/([a-z])([A-Z])/g, '$1 $2').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')">
                                    </td>
                                    <td class="p-2 break-all" x-text="value"></td>
                                </tr>
                            </template>
                        </table>
                    </div>
                </template>
                <template x-if="game.answers.length > 0">
                    <div class="mt-4">
                        <h2 class="text-sm font-bold">Answers</h2>
                        <table class="mt-2 table-auto w-full border">
                            <template x-for="(answer, index) of game.answers">
                                <tr class="border bg-slate-800">
                                    <td class="p-2 align-top border-r border-white/70" x-text="index + 1"></td>
                                    <td class="p-2 text-left">
                                        <pre x-text="JSON.stringify(answer, null, 2)"></pre>
                                    </td>
                                </tr>
                            </template>
                        </table>
                    </div>
                </template>
            </div>
        </div>
    </template>
</div>
{% endblock %}

{% block scripts %}
<script>
    function GamePlay() {
        return {
            debug: false,
            /** @type {WebSocket|null} */
            ws: null,
            client: {
                /** @type {string|null} */
                playerId: null,
                /** @type {string|null} */
                displayName: null,
                /** @type {"gameMaster"|"player"|"observer"} */
                playerType: "observer",
                awaitingUpdate: false,
                /** @type {"initializing"|"waitingRoom"|"gameStarted"|"answering"|"revealing"|"voting"|"roundFinished"|"gameFinished"} */
            },
            get clientState() {
                if (this.client.displayName === null) return "initializing";
                else if (this.game.status === "pending") return "waitingRoom";
                else if (this.game.status === "finished") return "gameFinished";
                else if (this.game.status === "started")
                    if (!this.game.roundId) return "gameStarted";
                    else if (this.game.roundWinner !== null) return "roundFinished";
                    else if (
                        this.game.answers.length &&
                        !this.game.answers.some((a) => a.shown === false)
                    )
                        return "voting";
                    else if (this.game.answersClosed) return "revealing";
                    else return "answering";
                return "initializing";
            },
            game: {
                gameId: "",
                name: "",
                roundId: "",
                lastRound: false,
                answersClosed: false,
                /** @type {"pending"|"started"|"finished"} */
                status: "pending",
                /** @type {Array<{ id: string }>} */
                players: [],
                roundNumber: 0,
                /** @type {string|null} */
                imageUrl: null,
                /** @type {Array<{ id: string, username: string, value: string, likes: number, shown: boolean }>} */
                answers: [],
                /** @type {string|null} */
                roundWinner: null,
                /** @type {Record<string, number>} */
                scores: {},
                /** @type {string|null} */
                gameWinner: null,
            },
            async init() {
                // get the game id from the URL in the format of `/games/:id/play`
                const gameId = window.location.pathname.split("/")[2];

                // initialize websocket at `/games/:id/ws`
                this.ws = new WebSocket(
                    `ws://${window.location.host}/games/${gameId}/ws`
                );

                this.ws.onmessage = (message) => this.handleMessage(message.data);

                // add global event listener for ctrl+shift+d to toggle debug mode
                window.addEventListener("keydown", (event) => {
                    if (event.altKey && event.shiftKey && event.key === "D") {
                        this.debug = !this.debug;
                    }
                });
            },
            async handleMessage(message) {
                const event = JSON.parse(message);

                if (event.type === "requestDisplayName") this.getDisplayName();
                else if (event.type === "unavailableDisplayName")
                    this.retryDisplayName();
                else if (event.type === "joinSuccess")
                    this.joinSuccess(event.message);
                else if (event.type === "newPlayer")
                    this.showNewPlayer(event.message);
                else if (event.type === "notification")
                    this.showNotification(event.message);
                else if (event.type === "stateChange") this.setState(event.message);
            },
            joinSuccess({ playerType }) {
                if (playerType.type === "gameMaster") {
                    this.client.playerType = "gameMaster";
                    this.client.displayName = "Game Master";
                } else if (playerType.type === "player") {
                    this.client.playerId = playerType.player.id;
                    this.client.playerType = "player";
                    this.client.displayName = playerType.player.displayName;
                } else if (playerType.type === "observer") {
                    this.client.playerId = playerType.player.id;
                    this.client.playerType = "observer";
                    this.client.displayName = playerType.player.displayName;
                }
            },
            showNewPlayer(message) {
                // not implemented
            },
            showNotification(message) {
                // not implemented
            },
            setState({ state }) {
                this.game = state;
                this.client.awaitingUpdate = false;
            },
            copyLink() {
                const adminUrl = window.location.href;
                const playerUrl = adminUrl.replace(/\/run$/, "/play");

                navigator.clipboard.writeText(playerUrl);
            },
            startRound() {
                this.client.awaitingUpdate = true;
                this.ws.send(
                    JSON.stringify({
                        type: "startRound",
                        message: { round: this.game.roundNumber + 1 },
                    })
                );
            },
            closeAnswers() {
                this.client.awaitingUpdate = true;
                this.ws.send(
                    JSON.stringify({
                        type: "closeAnswers",
                        message: { roundId: this.game.roundId },
                    })
                );
            },
            revealAnswer(answerId) {
                this.client.awaitingUpdate = true;
                this.ws.send(
                    JSON.stringify({
                        type: "revealAnswer",
                        message: { answerId },
                    })
                );
            },
            selectWinner(winner) {
                this.client.awaitingUpdate = true;
                this.ws.send(
                    JSON.stringify({
                        type: "endRound",
                        message: { winner, roundId: this.game.roundId },
                    })
                );
            },
            nextRoundOrEndGame() {
                if (!this.game.lastRound) return this.startRound();

                this.client.awaitingUpdate = true;
                this.ws.send(
                    JSON.stringify({
                        type: "endGame",
                    })
                );
            },
        };
    }
</script>
{% endblock %}