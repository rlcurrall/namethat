{% extends "layout/app.jinja" %}

{% block title %}Create Games{% endblock %}

{% block content %}
<div x-data="CreateGame">
    <form class="h-full flex flex-col" @submit.prevent="submit">
        <div class="space-y-12 flex-grow">
            <div class="border-b border-gray-900/10 pb-12">
                <h2 class="text-base font-semibold leading-7 text-white">
                    Create a Game
                </h2>

                <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                    <div class="sm:col-span-4">
                        <label for="game-name" class="block text-sm font-medium leading-6 text-white">
                            Game Name
                        </label>

                        <div class="mt-2 flex rounded-md shadow-sm">
                            <span
                                class="inline-flex items-center font-semibold rounded-l-md bg-gray-700 px-3 ring-1 ring-inset ring-white/10 text-white sm:text-sm">
                                Name that
                            </span>
                            <input x-model="form.name" type="text" id="game-name" name="name" required
                                class="block w-full min-w-0 flex-1 rounded-none rounded-r-md py-1.5 px-3 bg-white/5 text-white ring-1 ring-inset ring-white/10 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-teal-600 sm:text-sm sm:leading-6" />
                        </div>

                        <div class="mt-2">
                            <button type="button" class="text-sm font-medium leading-6 text-teal-500"
                                @click="showSampleSearch">
                                Search for sample images
                            </button>
                        </div>
                    </div>
                </div>

                <div x-show="search.shown" class="my-10 border-t border-white/50"></div>

                <div x-show="search.shown">
                    <div class="flex justify-between items-center">
                        <p class="block text-sm font-medium leading-6 text-white">
                            Sample Images
                        </p>

                        <div class="flex gap-2">
                            <input x-model="search.value" type="text" required @keydown.enter.prevent="getSampleImages"
                                class="block w-full min-w-0 flex-1 rounded-md py-1.5 px-3 bg-white/5 text-white ring-1 ring-inset ring-white/10 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-teal-600 sm:text-sm sm:leading-6" />
                            <button @click="getSampleImages" type="button"
                                class="rounded-md bg-teal-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-teal-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-600">
                                Get
                            </button>
                        </div>
                    </div>

                    <template x-if="search.loading">
                        <div class="py-12 flex items-center justify-center">
                            <div class="lds-dual-ring"></div>
                        </div>
                    </template>
                    <style>
                        .lds-dual-ring {
                            display: inline-block;
                            width: 80px;
                            height: 80px;
                        }

                        .lds-dual-ring:after {
                            content: " ";
                            display: block;
                            width: 64px;
                            height: 64px;
                            margin: 8px;
                            border-radius: 50%;
                            border: 6px solid rgb(20 184 166);
                            border-color: rgb(20 184 166) transparent rgb(20 184 166) transparent;
                            animation: lds-dual-ring 1.2s linear infinite;
                        }

                        @keyframes lds-dual-ring {
                            0% {
                                transform: rotate(0deg);
                            }

                            100% {
                                transform: rotate(360deg);
                            }
                        }
                    </style>
                    <template x-if="!search.loading && search.results.length > 0">
                        <div class="mt-6">
                            <div class="flex gap-4 overflow-y-auto py-4">
                                <template x-for="(image, index) in search.results">
                                    <button type="button" class="flex-shrink-0 w-32 h-32 rounded-md overflow-hidden"
                                        @click.prevent="addSampleImage(image)">
                                        <img :src="image" alt="Sample image" class="w-full h-full object-cover" />
                                    </button>
                                </template>
                            </div>
                        </div>
                    </template>
                </div>

                <div class="my-10 border-t border-white/50"></div>

                <div class="rid grid-cols-1 gap-x-6 gap-y-8">
                    <div class="sm:col-span-4">
                        <div class="flex justify-between items-center">
                            <p class="block text-sm font-medium leading-6 text-white">
                                Images
                            </p>

                            <button @click="form.images.push({ url: '' })" type="button"
                                class="rounded-md bg-teal-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-teal-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-600">
                                Add
                            </button>
                        </div>

                        <ul class="my-6 space-y-2">
                            <template x-for="(image, index) in form.images">
                                <li>
                                    <div class="mt-2 flex rounded-md shadow-sm">
                                        <input id="game-name" required type="url" :name="`images[${index}]`"
                                            x-model="image.url"
                                            class="block w-full rounded-l-md border-0 bg-white/5 py-1.5 px-3 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-teal-500 sm:text-sm sm:leading-6" />
                                        <button @click="remove(index)" type="button"
                                            class="inline-flex items-center font-semibold rounded-r-md bg-red-500/70 px-3 ring-1 ring-inset ring-white/10 text-white sm:text-sm hover:cursor-pointer hover:bg-red-500/90">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>
                                </li>
                            </template>
                        </ul>

                        <div class="flex justify-end"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6 flex items-center justify-end gap-x-6">
            <a href="/games" class="text-sm font-semibold leading-6 text-gray-100">
                Cancel
            </a>
            <button type="submit"
                class="rounded-md bg-teal-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-teal-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-600">
                Create
            </button>
        </div>
    </form>

    <!-- Error toast -->
    <template x-if="error">
        <div class="pointer-events-none fixed inset-x-0 bottom-0 sm:flex sm:justify-center sm:px-6 sm:pb-5 lg:px-8">
            <div
                class="pointer-events-auto flex items-center justify-between gap-x-6 bg-red-600 px-6 py-2.5 sm:rounded-xl sm:py-3 sm:pl-4 sm:pr-3.5">
                <p class="text-sm leading-6 text-white">
                    <a href="#" class="flex gap-2 items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <strong class="font-semibold">Error</strong>
                        <span x-text="error"></span>
                    </a>
                </p>
                <button type="button" class="-m-1.5 flex-none p-1.5" @click="error = null">
                    <span class="sr-only">Dismiss</span>
                    <svg class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path
                            d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                    </svg>
                </button>
            </div>
        </div>
    </template>
</div>
{% endblock %}

{% block scripts %}
<script>
    function CreateGame() {
        return {
            search: {
                value: "",
                results: [],
                shown: false,
                loading: false,
            },
            samples: [],
            form: {
                name: "",
                images: [],
            },
            error: null,
            remove(index) {
                this.form.images.splice(index, 1);
            },
            async getSampleImages() {
                try {
                    this.search.loading = true;
                    const response = await fetch(
                        `https://openart.ai/api/search?source=any&type=both&query=${this.search.value}&cursor=`
                    );

                    if (!response.ok) {
                        throw new Error("Could not get sample images");
                    }

                    const samples = await response.json();
                    this.search.results = samples.items.map((image) => image.image_url);
                } catch (error) {
                    console.error(error);
                    this.error = error.message;
                    const tid = setTimeout(() => {
                        this.error = null;
                        clearTimeout(tid);
                    }, 5000);
                } finally {
                    this.search.loading = false;
                }
            },
            addSampleImage(image) {
                this.form.images.push({ url: image });
            },
            showSampleSearch() {
                this.search.value = this.form.name;
                this.getSampleImages();
                this.search.shown = !this.search.shown;
            },
            async submit() {
                try {
                    if (!this.form.name) {
                        throw new Error("Game name is required");
                    }
                    if (this.form.images.length < 2) {
                        throw new Error("At least 2 images are required");
                    }

                    const response = await fetch("/api/games", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            name: this.form.name,
                            images: this.form.images.map((image) => image.url),
                        }),
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.error);
                    }

                    window.location.assign("/games");
                } catch (error) {
                    console.error(error);
                    this.error = error.message;
                    const tid = setTimeout(() => {
                        this.error = null;
                        clearTimeout(tid);
                    }, 5000);
                }
            },
        };
    }
</script>
{% endblock %}